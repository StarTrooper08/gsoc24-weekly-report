{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Summer of Code 2024 Journey and Learnings","text":""},{"location":"#little-bit-about-me","title":"Little Bit About Me","text":"<p>Hello Everyone, I'm Atharva Shirdhankar, an Open Source Developer and DevOps Engineer with a strong passion for Linux Systems, Docker, and GitHub Actions. I also enjoy working with a variety of GenAI frameworks and platforms like TensorFlow, OpenCV, and Hugging Face.</p> <p>My coding expertise spans Bash scripting, Python, R, and Go, which I use to optimize workflows and enhance development processes. Additionally, I love experimenting with microcontrollers and IoT, particularly with the Raspberry Pi boards, where I bring together hardware and software to create exciting projects.</p>"},{"location":"#how-it-started","title":"How it started","text":"<p>My journey in Open Source and GSoC began in 2023 when I first discovered the R Dev Container project. That year, I was thrilled to be selected as a GSoC'23 mentee. Even after the official program ended, I continued to contribute to the project, gradually adding to its development.</p> <p>Fast forward to March 17, 2024, when the R Dev Container project was once again listed on the R Project GSoC Idea list. At that moment, I faced a dilemma: should I participate as a mentee for the second time or step up as a co-mentor? Ultimately, I decided to embrace the unique opportunity GSoC offers by allowing individuals to participate as mentees twice.</p> <p>Following the same process I did in GSoC'23, I carefully reviewed the project description and the project test case tasks outlined for the R Dev Container. I completed the tasks, engaged in meaningful discussions with mentors, prepared my project proposal, and then waited patiently for the results\u2014just as I had done the year before.</p> <p>And that\u2019s how my Open Source journey truly began!</p>"},{"location":"#project-background","title":"Project Background","text":"<p>In order to encourage users to contribute to R, it is important to lower the on-ramp to contribution so that people are not frustrated by set-up issues and that they feel that the time volunteered is being spent on useful work. A common challenge is getting a development environment set up with all the prerequisites and configurations to build R from source. Difficulties can be caused by different operating systems, ways of managing software on those systems and interactions with personal set-ups. The R Dev Container provides a standardized environment that can be accessed through a web browser meaning that a contributor can get started with building R in less than an hour, rather than spending several hours finding out how to set up their own machine.</p>"},{"location":"#project-repository","title":"Project Repository","text":"<p>Github : R Dev Container</p>"},{"location":"#r-dev-container-documentation","title":"R Dev Container Documentation","text":"<p>Latest R Dev Container Docs</p>"},{"location":"#project-mentors","title":"Project Mentors","text":"<p>Heather Turner and  Iain Emsley</p>"},{"location":"#weekly-reports","title":"Weekly Reports","text":""},{"location":"#community-bonding-period","title":"Community Bonding Period","text":"<ul> <li> Week 0</li> </ul>"},{"location":"#coding-period-begins","title":"Coding Period Begins!","text":"<ul> <li> Week 1</li> <li> Week 2</li> <li> Week 3</li> <li> Week 4</li> <li> Week 5 </li> <li> Week 6</li> <li> Week 7 </li> <li> Week 8 </li> <li> Week 9 </li> <li> Week 10</li> <li> Week 11 </li> <li> Week 12</li> </ul>"},{"location":"#project-wrap-up","title":"Project Wrap Up","text":"<ul> <li> Week 13</li> </ul>"},{"location":"#community-collaboration-and-participation","title":"Community Collaboration and Participation","text":"<p>Beyond collaborating with my mentors during GSoC, I had the opportunity to present the project to other R Project members during the RCWG meeting, which is the monthly gathering of R contributors. The R Dev Container received positive feedback from the community\u2014many members found it helpful, provided valuable suggestions for improvement, and even contributed directly to the project.</p> <p>One of the highlights was seeing the R Dev Container in action during R Dev Day in July 2024, where developers used it to contribute to the R codebase. An excellent example of its practical application is showcased in a blog post by Di Cook, which you can find here.</p> <p>I am grateful to my mentors Heather Turner and Iain Emsley for encouraging me to participate in the LatinR event and for guiding me through the process of reviewing my talk abstract. This will be my first time presenting at a large community event organized by the R Project, and I am excited about the opportunity.</p> <p>A special thanks to Di Cook, Elio Campitelli, and Lorena Abad Crespo for their invaluable contributions to the R Dev Container project.</p>"},{"location":"reports/week_1/","title":"Week 1","text":"<p>May 27 - June 1</p>"},{"location":"reports/week_1/#using-httpgd-for-r-graphics","title":"Using <code>httpgd</code> for R graphics","text":"<p>The first week of the Official Coding Period kicked off with configuring the httpgd package.</p> <p>Issue Number : #100</p> <p>Pull Request : #110</p> <p>The httpgd package in R provides a modern graphics device that serves plots via an HTTP interface, making it ideal for viewing graphical output in a web browser or other HTTP clients. This package excels in interactive and remote development environments like Jupyter Notebooks, RStudio Server, and cloud-based IDEs, where seamless plot access is essential.</p> <p>In the R Dev Container environment, where the default behavior involves generating and displaying plots as PNGs, httpgd addresses several limitations. The default PNG display size often lacks visual clarity, and each new plot overwrites the previous one, preventing users from navigating backward or forward through plots created in a session. By configuring httpgd in the R Dev Container, users gain enhanced functionality, including adjustable plot sizes, the ability to navigate between plots, and features like zooming, significantly improving the plotting experience in VSCode and similar environments.</p> <p>To enable this feature in the R Dev Container project, I installed the httpgd package in the Dockerfile:</p> <p>Dockerfile</p> <pre><code>Rscript -e \"install.packages('httpgd', repos='https://cran.rstudio.com')\"\n</code></pre> <p>Explanation:</p> <ul> <li>This line is added to your Dockerfile to install the httpgd package in R.</li> <li>install.packages('httpgd', repos='https://cran.rstudio.com') installs the httpgd package from the specified CRAN repository.</li> <li>By adding this command to your Dockerfile, you ensure that the httpgd package is installed whenever a new Docker image is built, making it available in your R Dev Container environment.</li> </ul> <p>Next, I configured VSCode settings using the devcontainer.json file to utilize httpgd in the R Dev Environment.</p> <p>Devcontainer.json</p> <pre><code>\"r.plot.useHttpgd\": true\n</code></pre> <p>Explanation:</p> <ul> <li>The r.plot.useHttpgd setting is a Boolean option (true or false).</li> <li>By setting this to true, you instruct VSCode to use httpgd as the default plotting device in your R development environment, which provides enhanced graphical capabilities compared to the default PNG-based plotting.</li> </ul> <p>Before configuring httpgd, we used an .Rprofile file to manage PNG plotting with the VSCode-R extension.</p> <p>.Rprofile</p> <pre><code>options(vsc.use_httpgd = FALSE,\n        vsc.dev.args = list(width = 800, height = 600))\n</code></pre> <p>This commit #ea02cc was authored by my mentor, Heather Turner.</p> <p>After installing and configuring httpgd, the previous VSCode-R extension configuration was commented out. The .Rprofile file was then updated to customize the R environment within the development container, specifically tailored for full use of the VSCode-R extension. You can see the related commit here.</p> <p>.Rprofile</p> <pre><code>.Library.site &lt;- \"/usr/local/lib/R/site-library\"\n# .libPaths() already includes site library for default R version.\n.libPaths(c(.libPaths(), .Library.site))\n</code></pre> <p>Explanation:</p> <ul> <li>.Library.site &lt;- \"/usr/local/lib/R/site-library\" sets the path to the site-wide R library.</li> <li>.libPaths(c(.libPaths(), .Library.site)) adds the site-wide library to the library search paths in R. This ensures that the installed packages, like httpgd, are easily accessible during your R sessions.</li> </ul>"},{"location":"reports/week_1/#setting-build-variables-to-default-and-adding-a-script-for-advanced-users","title":"Setting Build Variables to Default and Adding a Script for Advanced Users","text":"<p>After resolving the httpgd issue, I moved on to another task related to environment variables in the Dockerfile and helper scripts.</p> <p>Issue Number : #103</p> <p>Pull Request : #116</p> <p>This task involved updating the $BUILDDIR and $TOP_SRCDIR environment variables to facilitate the use of helper scripts for setting the R console/terminal, which is built in the terminal, and using an environment variable to specify a sub-directory for building R from source.</p> <p>In earlier releases of the R Dev Container, the $BUILDDIR and $TOP_SRCDIR paths were static, and contributors had to append subdirectories, such as <code>$BUILDDIR/$sub_directory</code>, while building R. This approach had two drawbacks. First, appending the subdirectory to $BUILDDIR and $TOP_SRCDIR was not mentioned in the official R Dev Guide, potentially causing confusion among contributors familiar with the guide. Second, switching between subdirectories was cumbersome. For instance, if you had built two R versions\u2014r-devel and r-raw\u2014switching between them required manually specifying <code>$BUILDDIR/r-devel</code> or <code>$TOP_SRCDIR/r-raw</code> each time, increasing the risk of breaking the build or introducing bugs.</p> <p>To address these issues, we added a default subdirectory called r-devel to both environment variables (BUILDDIR and TOP_SRCDIR) and created a script to change r-devel to another label, such as r-raw, if a contributor wanted to build multiple R versions. This script changes the subdirectory in both $BUILDDIR and $TOP_SRCDIR simultaneously, solving the problem of subdirectory switching while aligning the R Dev Container documentation with the R Dev Guide, thereby reducing confusion for contributors.</p> <p>Environment Variables in Dockerfile</p> <pre><code>ENV DEFAULT_LABEL=\"r-devel\"\nENV BUILDDIR='/workspace/r-dev-env/build/${DEFAULT_LABEL}'\nENV TOP_SRCDIR='/workspace/r-dev-env/svn/${DEFAULT_LABEL}'\nENV PATCHDIR='/workspace/r-dev-env/patches'\n</code></pre> <p>Explanation:</p> <ul> <li>These lines define environment variables in your Dockerfile, which will be used within the R Dev Container.</li> <li>DEFAULT_LABEL=\"r-devel\" sets a default label for your build directory.</li> <li>BUILDDIR='/workspace/r-dev-env/build/${DEFAULT_LABEL}' defines the build directory path, with the default label (r-devel) as part of the path. This allows for flexibility in switching between different R versions by simply changing the label.</li> <li>TOP_SRCDIR='/workspace/r-dev-env/svn/${DEFAULT_LABEL}' sets the source directory path, similarly including the label to support different R versions.</li> <li>PATCHDIR='/workspace/r-dev-env/patches' defines the directory path for patches, though it does not depend on the label.</li> </ul> <p>set_build_r Helper Script</p> <pre><code>#!/bin/bash\n\n# Default values for build and source directories\n# BUILDDIR=\"/workspaces/r-dev-env/build/\"\n# TOP_SRCDIR=\"/workspaces/r-dev-env/svn/\"\n# DEFAULT_LABEL=\"r-devel\"\n\n# New environment variable\nNEW_LABEL=${1:-$DEFAULT_LABEL}\n\n# Replace \"r-devel\" with the new label in default values\nNEW_BUILDDIR=\"${BUILDDIR}${NEW_LABEL}\"\nNEW_TOP_SRCDIR=\"${TOP_SRCDIR}${NEW_LABEL}\"\n\n# Print the set directories\necho \"The build directory is set to: $NEW_BUILDDIR\"\necho \"The source directory is set to: $NEW_TOP_SRCDIR\"\n\n# Export the directories as environment variables\nexport NEW_BUILDDIR\nexport NEW_TOP_SRCDIR\n</code></pre> <p>Explanation:</p> <ul> <li>This is a Bash script designed to allow contributors to change the default label (r-devel) to something else, such as r-raw, for creating and managing multiple R builds.</li> <li>The script begins by accepting a new label as a parameter (NEW_LABEL=\\({1:-\\)DEFAULT_LABEL}). If no new label is provided, it defaults to r-devel.</li> <li>It then replaces the default r-devel label with the new label in the build (NEW_BUILDDIR) and source (NEW_TOP_SRCDIR) directory paths. T- he script prints out the new paths for clarity and exports these paths as environment variables, so they can be used in the current session or by other scripts.</li> </ul> <p>Additionally, I modified the execution permissions for the script commit #164c22.</p> <p>After testing, I found that it wasn't working as expected, but this provided valuable learning opportunities.</p> <p>Learnings: This week, with several ongoing issues, I focused on maintaining clear and readable code by adding comments in scripts. This approach helped keep the progress steady and minimized potential blockages.</p>"},{"location":"reports/week_10/","title":"Week 10","text":"<p>July 29 - August 3</p>"},{"location":"reports/week_10/#restructuring-documentation","title":"Restructuring Documentation","text":"<p>This week, I focused on updating the documentation and restructuring the navbar and sidebar options for better navigation. I incorporated feedback from my mentors and made necessary revisions to the Gitpod documentation.</p> <p>Pull Request : #165</p>"},{"location":"reports/week_11/","title":"Week 11","text":"<p>August 5 - August 10</p>"},{"location":"reports/week_11/#using-prebuild-docker-image-in-gitpodyml-and-container-version-issue","title":"Using prebuild docker image in gitpod.yml and Container Version issue","text":"<p>I specified a Docker image tag instead of allowing Gitpod to build the workspace using the .gitpod.Dockerfile. This adjustment resolved the issue of the container version not displaying correctly in the R Dev Container within Gitpod.</p> <p>Pull Request : #168</p> <pre><code>image:\n  file: .gitpod.Dockerfile &lt;- previous code\n  #after first build of gitpod docker image change file to image with the tag.\nimage: ghcr.io/r-devel/r-dev-env:gitpod.devel\n</code></pre>"},{"location":"reports/week_11/#optimize-docs-assets","title":"Optimize Docs Assets","text":"<p>To optimize the documentation, we came up with to optimize docs images/assets and to do so I used R lang to optimize images. And to automate this process I used actions workflow. Whenever a new image is added to assets directory the workflow runs and optimize the specific image(which are not optimized).</p> <p>Issue Number : #161</p> <p>Pull Request : #172</p> <pre><code>library(magick)\nlibrary(tools)\n\n# Define the directory containing images\nimage_dir &lt;- file.path(\"docs\", \"assets\")\n\n# Get all photos in the directory with specified extensions\nfiles &lt;- dir(image_dir, pattern = \"\\\\.(jpeg|jpg|png)$\", ignore.case = TRUE)\n\n# Process each file\nfor (i in seq_along(files)) {\n    # Read the image\n    file_path &lt;- file.path(image_dir, files[i])\n    img &lt;- tryCatch({\n        image_read(file_path)\n    }, error = function(e) {\n        message(\"Error reading image: \", file_path)\n        next\n    })\n\n    # Resize the image to 800 px width using Triangle filter for resampling\n    img &lt;- image_resize(img, geometry_size_pixels(width = 800), filter = \"Triangle\")\n\n\n    # Define the output path (overwrite original image)\n    output_path &lt;- file_path\n\n    # Write the optimized image (overwrite original image)\n    tryCatch({\n        image_write(img, output_path, format = \"jpg\", quality = 82)\n    }, error = function(e) {\n        message(\"Error writing image: \", output_path)\n    })\n}\n</code></pre> <p>Explaination: This R script processes images in the docs/assets directory by:</p> <ul> <li>Loading Required Libraries: Uses magick for image processing.</li> <li>Listing Image Files: Finds all .jpeg, .jpg, and .png files.</li> <li>Processing Each Image:</li> <li>Read: Loads each image.</li> <li>Resize: Adjusts the width to 800 pixels using the Triangle filter.</li> <li>Save: Overwrites the original file with a resized JPEG version, quality set to 82.</li> <li>Error Handling: Includes error handling for reading and writing images.</li> </ul> <p>The goal is to resize and optimize images for better performance.</p>"},{"location":"reports/week_11/#latinr-talk-abstract","title":"LatinR Talk Abstract","text":"<p>In addition to working on the project, I was given the opportunity to present at the LatinR conference, scheduled for November. This being my first time submitting an abstract to a major R Project community event, I sought guidance from my mentors on crafting an effective abstract. Their advice was invaluable in preparing for this significant occasion.</p>"},{"location":"reports/week_12/","title":"Week 12","text":"<p>August 12 - August 17</p>"},{"location":"reports/week_12/#local-setup","title":"Local Setup","text":"<p>This feedback was provided by R contributor Elio. While the local setup used to function correctly, it didn't allow for file creation inside the R Dev Container. To address this, I added the relevant permissions to the Dockerfile and updated the local setup to support and ensure the new helper script functions correctly.</p> <p>Issue Number : #157</p> <p>Pull Request : #174</p> <p>Also made some changes in which_r script to fetch work_dir in localsetup properly</p> <p>which_R helper script</p> <pre><code>  elif [ \"$HOME\" = '/home/vscode' ]; then\n    # Check if it's running in a Codespace\n    if [ -d \"/home/vscode/.vscode-remote\" ]; then\n      JSON_FILE_PATH=\"/home/vscode/.vscode-remote/data/Machine/settings.json\"\n    else\n      # Handle local devcontainer setup\n      JSON_FILE_PATH=\"$WORK_DIR/.vscode/settings.json\"\n    fi\n</code></pre> <p>Explaination: - Check Home Directory: If the HOME environment variable is set to /home/vscode, it indicates the script is running in a GitHub Codespace or similar environment. - Verify Codespace: If the .vscode-remote directory exists, it sets the JSON_FILE_PATH to the Codespace-specific settings file location. - Local Devcontainer: If the .vscode-remote directory does not exist, it assumes the script is running in a local development container and sets the JSON_FILE_PATH accordingly.</p>"},{"location":"reports/week_12/#index-page","title":"Index page","text":"<p>Since restructuring was done in the documentation directories and subdirectories, it was necessary to update the index.md file to reflect these changes. This ensures that the documentation displays in the correct structure when Codespace or workspace starts.</p> <p>Issue Number : #166</p> <p>Pull Request : #175</p>"},{"location":"reports/week_12/#optimize-docs-images","title":"Optimize Docs Images","text":"<p>The workflow to optimize docs images had issues so made some changes in worklflow.</p> <p>Issue Number : #161</p> <p>Pull Request : #177</p>"},{"location":"reports/week_12/#gitpod-live-share-docs","title":"Gitpod Live Share docs","text":"<p>After completing R Dev Container gitpod environment setup, we also added quick quide for gitpod live share option.</p> <p>Pull Request : #178</p>"},{"location":"reports/week_2/","title":"Week 2","text":"<p>June 3 - June 8</p> <p>Week 2 began with updating the documentation and github actions for building docker image.</p>"},{"location":"reports/week_2/#updating-the-documentation","title":"Updating the Documentation","text":"<p>The previous documentation had become outdated due to significant changes made during the transition from version 0.1 to 0.2. Additionally, a new Material UI design was introduced, and the images in the documentation were being loaded as external links, leading to slow loading times when the documentation webpage was opened. To address this, it was necessary to consolidate these images into a single asset folder under the docs directory. And this issue was broken down into pieces(sub issues).</p> <p>This task was broken down into several sub-issues. I worked on a handful of these issues, receiving valuable feedback from my mentors along the way.</p> <p>The last commit I made to the documentation for this week can be found here#ea88a9.</p> <p>Issue Number : #96, #97, #99, #105,#108, #108, #113, #114, #115, #117</p> <p>Pull Request : #118</p>"},{"location":"reports/week_2/#docker-build-workflow","title":"Docker Build workflow","text":"<p>The docker build actions was building docker image using PR number as tag. So it was quickly fixed to used devel tag for docker image.</p> <p>Pull Request : #120</p> <p>docker-build actions update</p> <p><pre><code>uses: docker/metadata-action@v5\n  with:\n    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n    images: ${{ env.REGISTRY }}/${{ github.repository }}\n    tags: |\n      type=ref,event=branch\n      type=ref,event=pr\njobs:\n  with:\n    context: .\n    push: true\n    build-args: |\n      \"CONTAINER_VERSION=${{ env.VERSION }}\"\n    tags: ${{ steps.meta.outputs.tags }}\n    labels: ${{ steps.meta.outputs.labels }}\n    tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devel\n</code></pre> Explaination:</p> <p>This Docker build action workflow is designed to automate the process of building, tagging, and pushing Docker images. Initially, the images were tagged based on the pull request number, but the workflow was updated to consistently use the devel tag for development builds. This change makes it easier to identify and manage development images in the Docker registry.</p> <p>Learnings: While working on the documentation updates, I made the mistake of combining several sub-issues into a single pull request (PR). Although this initially seemed like an efficient approach, it made the review process more complicated as more changes were added. This created a bottleneck for both the maintainers and myself, slowing down progress.</p> <p>Typically, I create one PR per issue, but since these sub-issues were part of a larger documentation update, I opted to keep them in one PR. However, this approach backfired. Moving forward, I've learned the importance of creating PRs that are easy to review. It\u2019s also a good open-source practice to have one PR per issue and to make changes in manageable chunks.</p>"},{"location":"reports/week_3/","title":"Week 3","text":"<p>June 10 - June 15</p>"},{"location":"reports/week_3/#follow-up-on-documentation-updates","title":"Follow-up on Documentation Updates","text":"<p>Week 3 started with addressing the remaining sub-issues related to updating the documentation and following up on reviews for the changes made in the previous weeks.</p> <p>Issue Number : #96, #97, #99, #105,#108, #108, #113, #114, #115, #117</p> <p>Pull Request : #118</p>"},{"location":"reports/week_3/#continuing-work-on-setting-build-variables-and-script-enhancements","title":"Continuing Work on Setting Build Variables and Script Enhancements","text":"<p>The changes made in Week 1 for setting build variables were not functioning as expected. I worked on this issue again alongside the documentation tasks. Finally, the set_build_r script worked as intended. Additionally, the multi_r script was renamed to which_r with some modifications. This script allows users to switch the R Interactive console to the selected R version built in the R Dev Container.</p> <p>Issue Number : #103, #104</p> <p>Pull Request : #118</p> <p>set_build_r helper script</p> <pre><code>#!/bin/bash\n\n# Check if the label argument is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;label&gt;\"\n  echo \"BUILDDIR is currently set to $BUILDDIR\"\n  echo \"TOP_SRCDIR is currently set to $TOP_SRCDIR\"\nelse\n  # Assign the argument to a variable\n  LABEL=$1\n\n  # Update the environment variables\n  export BUILDDIR=\"/workspaces/r-dev-env/build/$LABEL\"\n  export TOP_SRCDIR=\"/workspaces/r-dev-env/svn/$LABEL\"\n\n  # Print the new values\n  echo \"BUILDDIR is now set to $BUILDDIR\"\n  echo \"TOP_SRCDIR is now set to $TOP_SRCDIR\"\nfi\n</code></pre> <p>Explanation:</p> <ul> <li>This script, set_build_r, is designed to update environment variables used for building R in the R Dev Container.</li> <li>If no argument is provided when running the script, it simply displays the current values of the BUILDDIR and TOP_SRCDIR environment variables.</li> <li>If a label is provided, it updates these environment variables to point to specific directories that correspond to the given label.</li> <li>The script ends by printing the updated values of these variables.</li> </ul> <p>which_r helper script</p> <pre><code>#!/bin/bash\n\n# Specify the parent directory\nparent_dir=\"/workspaces/r-dev-env/build\"  # Assuming this is the correct path\n\n# Path to the settings.json file\nsettings_file_path=\"/home/vscode/.vscode-remote/data/Machine/settings.json\"\n\n# Ask user which R version to use\necho \"Which version of R should be used in new R terminals?\"\necho \"  1. R 4.4.0 (release version built into this container)\"\n\n# Check for additional R versions in subdirectories\nif [ -d \"$parent_dir\" ]; then\n  echo \"  Additional R builds available:\"\n\n  # Create an array to store subdirectory names\n  subdirs=()\n\n  # Loop through subdirectories and print numbered list\n  counter=2  # Start counter at 2 to avoid conflict with built-in R\n  for dir in \"$parent_dir\"/*; do\n    if [ -d \"$dir\" ]; then\n      subdir=$(basename \"$dir\")\n      subdirs+=(\"$subdir\")  # Populate subdirs array\n      echo \"    $counter. $subdir\"\n      ((counter++))\n    fi\n  done\nfi\n\n# Get user choice\nread -p \"Enter the number corresponding to the selected version: \" choice\n\n# Validate user choice\nif [[ ! \"$choice\" =~ ^[1-9]$ ]]; then\n  echo \"Invalid choice. Please enter a number between 1 and $(($counter - 1))\"\n  exit 1\nfi\n\n# Define selected version based on choice\nif [[ $choice -eq 1 ]]; then\n  # Use built-in R\n  selected_version=\"/usr/bin/R\"\nelse\n  # Use R from chosen subdirectory\n  chosen_subdir=\"${subdirs[((choice - 2))]}\"  \n  selected_version=\"$parent_dir/$chosen_subdir/bin/R\"  \nfi\n\n# Update settings.json with the chosen R path\nupdated_settings_data=$(cat \"$settings_file_path\" | jq --arg subdir \"$selected_version\" '.\"r.rterm.linux\"=$subdir')\necho \"$updated_settings_data\" &gt; \"$settings_file_path\"\n\necho \"R terminal will now use version: $selected_version\"\n</code></pre> <p>Explanation:</p> <ul> <li>The which_r script allows users to select which version of R they want to use in new R terminals within the development environment.</li> <li>The script starts by specifying a parent directory where different R builds are stored.</li> <li>It then prompts the user to select which version of R they want to use: either the built-in version or one of the additional builds available in subdirectories.</li> <li>The user's choice is validated, and the path to the selected R version is updated in the VS Code settings.json file. This ensures that new R terminals use the selected version.</li> <li>The script ends by printing the path to the selected R version.</li> </ul>"},{"location":"reports/week_3/#update-to-docker-build-workflow","title":"Update to Docker Build workflow","text":"<p>The docker build workflow was updated to tag docker image with branch name dynamically.</p> <p>Pull Request : #131</p> <p>docker-build actions update <pre><code> tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\n          build-args: |\n            CONTAINER_VERSION=${{ env.VERSION }}\n          labels: ${{ steps.meta.outputs.labels }}\n</code></pre></p> <p>Explanation:</p> <ul> <li><code>tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}</code>: This line dynamically tags the Docker image with the branch name using github.ref_name. This is helpful for identifying which branch the image was built from.</li> <li><code>build-args:</code>: The build-args section passes build arguments to the Docker build process. In this case, it sets CONTAINER_VERSION to the value of the VERSION environment variable.</li> <li><code>labels:</code>: This line applies labels to the Docker image using the metadata generated by the Docker Metadata Action. Labels are useful for adding metadata to images, which can be helpful for tracking and automation.</li> </ul> <p>Learnings: This week, I misunderstood a review from my mentor regarding the set_build_var issue. Instead of temporarily saving the subdirectory as a label, I tried to save every label inputted by contributors into a file. However, I eventually made the necessary changes, and everything worked as expected. This experience taught me that communication is key\u2014if I had clarified my doubts with my mentors earlier, the issue could have been resolved much sooner. As a professional software developer, over-communicating can sometimes be beneficial.</p>"},{"location":"reports/week_4/","title":"Week 4","text":"<p>June 17 - June 22</p>"},{"location":"reports/week_4/#which_r-version-r-version-choice-validation","title":"which_r version R version choice validation","text":"<p>While working on the set_build_r issue, I initially overlooked the importance of testing and validating R version choices in the which_r script. I later rectified this by implementing a choice validation mechanism within the which_r script, ensuring users can seamlessly switch between different R versions in the R Dev Container. Special thanks to my mentor, Iain Emsley, for his valuable assistance in testing and refining this addition to the project.</p> <p>Issue Number : #127</p> <p>Pull Request : #136</p> <p>which_r helper script</p> <p>The which_r script is designed to help users switch between different R versions available in the R Dev Container. It allows the user to select the R version they want to use in new R terminals. This script lists all the available R builds in the container and updates the VS Code settings to point to the selected R version.</p> <pre><code>#!/bin/bash\n\n# Specify the parent directory\nparent_dir=\"/workspaces/r-dev-env/build\"  # need to change to dynamic afterwards //TODO\n\n# Path to the settings.json file\nsettings_file_path=\"/home/vscode/.vscode-remote/data/Machine/settings.json\"\n\n# Ask user which R version to use\necho \"Which version of R should be used in new R terminals?\"\necho \"  1. R 4.4.0 (release version built into this container)\"\n\n# Check for additional R versions in subdirectories\nif [ -d \"$parent_dir\" ]; then\n  # Create an array to store subdirectory names\n  subdirs=()\n\n  # Loop through subdirectories and print numbered list\n  counter=2  # Start counter at 2 to avoid conflict with built-in R\n  for dir in \"$parent_dir\"/*; do\n    if [ -d \"$dir/bin\" ] &amp;&amp; [ -x \"$dir/bin/R\" ]; then\n      subdir=$(basename \"$dir\")\n      subdirs+=(\"$subdir\")  # Populate subdirs array\n      echo \"  $counter. $subdir\"\n      ((counter++))\n    fi\n  done\n\n  # If no additional R builds were found\n  if [ ${#subdirs[@]} -eq 0 ]; then\n    echo \"No additional R builds available.\"\n  fi\nfi\n\n# If no additional R builds were found\nif [ ${#subdirs[@]} -eq 0 ]; then\n  range=1\n  echo \"No additional R builds available.\"\nelse\n  range=$((counter - 1))\nfi\n\n# Get user choice\nread -p \"Enter the number corresponding to the selected version: \" choice\n\n# Define selected version based on choice\nif [[ \"$choice\" -eq 1 ]]; then\n  # Use built-in R\n  selected_version=\"/usr/bin/R\"\nelif [[ \"$choice\" -ge 2 ]] &amp;&amp; [[ \"$choice\" -lt \"$counter\" ]]; then\n  # Use R from chosen subdirectory\n  chosen_subdir=\"${subdirs[((choice - 2))]}\"  \n  selected_version=\"$parent_dir/$chosen_subdir/bin/R\"\nelse\n  # Invalid choice, default to built-in R\n  if [[ $range -eq 1 ]]; then\n    echo \"Invalid choice, please enter 1. Defaulting to built-in R version.\"\n  else\n    echo \"Invalid choice, please select options between 1 to $range. Defaulting to built-in R version.\"\n  fi\n  selected_version=\"/usr/bin/R\"\nfi\n\n# Update settings.json with the chosen R path\nupdated_settings_data=$(cat \"$settings_file_path\" | jq --arg subdir \"$selected_version\" '.\"r.rterm.linux\"=$subdir')\necho \"$updated_settings_data\" &gt; \"$settings_file_path\"\n\necho \"R terminal will now use version: $selected_version\"\n</code></pre> <p>Explanation:</p> <ul> <li>Directory and File Paths: The script specifies a directory where R builds are stored and the path to the VS Code settings file that will be updated.</li> <li>User Prompt: It prompts the user to select which R version to use, listing the built-in R version first.</li> <li>Checking for R Builds: The script searches the specified directory for additional R builds and lists them as options if found.</li> <li>User Input Handling: Based on the user\u2019s choice, the script sets the selected R version. If an invalid choice is made, it defaults to the built-in R version.</li> <li>Updating VS Code: The script updates the VS Code settings file with the selected R version so that new terminals use the correct version.</li> <li>Confirmation: It then confirms which R version will be used in new R terminals.</li> </ul>"},{"location":"reports/week_4/#use-function-vs-script-for-set_build_r","title":"Use function vs script for set_build_r","text":"<p>In this issue, the set_build_R script was encountering permission issues, which prevented it from functioning properly. To resolve this, the script was added to .bashrc, and it was restructured into a function to make it more readable and maintainable.</p> <p>Issue Number : #133</p> <p>Pull Request : #137</p> <p>Learnings: I realized the importance of thoroughly testing each pull request before moving on to the next issue. This experience taught me the value of creating test cases for every possible scenario to ensure robust solutions.</p>"},{"location":"reports/week_5/","title":"Week 5","text":"<p>June 24 - June 29</p>"},{"location":"reports/week_5/#fix-automatically-detecting-and-printing-the-default-r-version-in-which_r-script","title":"Fix: Automatically Detecting and Printing the Default R Version in which_r Script","text":"<p>While implementing choice validation in the which_r script, I decided to enhance it further by dynamically detecting and printing the default R version within the R Dev Container. Previously, the script explicitly printed a hardcoded R version, but with this update, it now automatically retrieves the latest default R version.</p> <p>Issue Number : #134 </p> <p>Pull Request : #144</p> <p>update to which_r helper script</p> <pre><code>built_in_r_version=$(R --version | grep \"^R version\" | awk '{print $3}')\n\necho \"Which version of R should be used in new R terminals?\"\necho \"  1. R 4.4.0 (release version built into this container)\" &lt;- previous code\necho \"  1. R $built_in_r_version (release version built into this container)\"\n</code></pre> <p>Explaination: - Built-in R Version Detection: The script uses the R --version command to dynamically extract the version of the built-in R installation. This is achieved by piping the output through grep and awk to capture just the version number. - Dynamic Version Printing: The detected R version is stored in the built_in_r_version variable and then printed within the script's prompt. This change ensures that the script always displays the correct version of the built-in R, even if it changes in the future.</p>"},{"location":"reports/week_5/#actions-docker-build-schedule-for-main-branch-and-devel-branch","title":"actions: docker build schedule for main branch and devel branch","text":"<p>I also updated the Docker build schedule actions to automatically rebuild the Docker image twice a month. Since the latest version of R is typically released twice a week, this workflow ensures that the Docker image always includes the most up-to-date version of R.</p> <p>Pull Request : #142</p>"},{"location":"reports/week_5/#docs-for-live-share","title":"Docs for Live Share","text":"<p>Added documentation on using Live Share, as this feature is not available in R Studio. Having comprehensive docs on Live Share usage is a valuable addition for collaborative work within the R Dev Container.</p> <p>Issue Number : #135</p> <p>Pull Request : #138</p>"},{"location":"reports/week_5/#adding-project-version-number-to-documentation-navbar","title":"Adding project version number to Documentation navbar","text":"<p>The mkdocs material has option to show repo info in navbar, so I did config in mkdocs to show project release version in navbar.</p> <p>Issue Number : #130</p> <p>Pull Request : #141</p>"},{"location":"reports/week_5/#release-of-r-dev-container-v02","title":"Release of R Dev Container v0.2","text":"<p>Documentation split into set of markdown files. These are used to create the documentation website https://contributor.r-project.org/r-dev-env/ and the user-focused pages can be accessed directly within the codespace, linked from an index that opens when the codespace first starts.  New documentation pages/topics:</p> <ul> <li>Restarting and stopping the codespace</li> <li>Live Share</li> <li>Local Setup</li> <li>Updating Source Code</li> <li>Creating a patch file</li> <li>Multiple R Versions</li> <li>SVN Help</li> <li>Contributor Guide (for R Dev Container itself)</li> <li>Troubleshooting</li> <li>Building R documentation now instructs to build R with recommended packages as it only takes a few more minutes to set up and enables all the tests to be run with make check.</li> <li>Updated GitHub Actions, so that the container is rebuilt twice a month with updated software, including the latest version of R.</li> <li>Disconnected Codespace from r-dev-env GitHub repository, so changes are not tracked as changes to code for the container itself.</li> <li>Updated Codespace settings so that checkouts of the R sources are recognised as Subversion repositories, connecting to VS Code version control tab.</li> <li>Updated Codespace settings so that the R code linter is turned off (cannot define linter for base R!)</li> <li>Enabled httpgd graphics device to replace the default of plotting to PNG.</li> <li>Modified the default settings of $BUILDDIR and $TOP_SRCDIR to give a more logical setup for working with multiple R versions.</li> <li>Added which_r script to set the R version to use in R terminals, rather than using sudo make install to overwrite installed R release version.</li> <li>Added set_build_r bash function to facilitate custom settings of $BUILDDIR and $TOP_SRCDIR for working with multiple R versions.</li> </ul> <p>Pull Request : #146</p>"},{"location":"reports/week_6/","title":"Week 6","text":"<p>July 1 - July 6</p>"},{"location":"reports/week_6/#update-to-docker-build-actions","title":"Update to Docker Build Actions","text":"<p>The actions weren't running when changes were made to the VERSION file, so I updated the workflow to include the VERSION file as a trigger. Now, the actions will run automatically whenever any changes are made to this file.</p> <p>Pull Request : #151</p>"},{"location":"reports/week_6/#troubleshoot-docs-for-rsync","title":"Troubleshoot docs for rsync","text":"<p>Due to the \"Rsync server Connection Limit Reached\" error, the R build process would occasionally halt. To address this, I added information about the issue in the documentation to help others understand and troubleshoot the problem if they encounter it.</p> <p>Issue Number : #139</p> <p>Pull Request : #152</p>"},{"location":"reports/week_6/#valgrind-installation-for-c-lang-support","title":"Valgrind Installation for C lang support","text":"<p>R is built upon C, C++, and Fortran, so we initially considered installing Valgrind in the Docker image to assist with debugging and memory analysis. However, we discovered that Valgrind was already included in the Docker image. This discovery was beneficial, as it saved us the effort of installing and configuring it separately. Consequently, we decided to close the pull request without merging it. Instead, we added information about Valgrind\u2019s availability to the documentation to ensure users are aware of this tool's presence and functionality within the Docker environment.</p> <p>Issue Number : #101</p> <p>Pull Request : #154, #163(24/July)</p>"},{"location":"reports/week_7/","title":"Week 7","text":"<p>July 8 - July 13</p>"},{"location":"reports/week_7/#testing-current-environment","title":"Testing Current Environment","text":"<p>This week, I dedicated time to thoroughly testing the current build project to ensure stability and performance. This was an essential step before transitioning to setting up Gitpod for the R Dev Container. Testing involved verifying the integrity of existing features and ensuring that all components were functioning correctly. Once confident in the current build, I proceeded with configuring the Gitpod environment, which will enable a more streamlined development experience and facilitate easier collaboration.</p>"},{"location":"reports/week_8/","title":"Week 8","text":"<p>July 15 - July 20</p>"},{"location":"reports/week_8/#setting-up-gitpod-env-for-r-dev-container-and-standardizing-helper-scripts-to-work-with-both-environmentscodespaces-and-gitpod","title":"Setting Up Gitpod Env for R Dev Container and Standardizing Helper scripts to work with both environments(codespaces and gitpod)","text":"<p>The work for R Dev Container version 0.3v starts from here. During this I worked around setting up streamlining environment for gitpod. And also did some refractoring of helper script to work with gitpod seemlessly. I firstly added gitpod config using .gitpod.yml and .gitpod.Dockerfile for gitpod workspace. Here we used official gitpod workspace base image this was to have a stable environment and to have a good support with gitpod.</p> <p>Issue Number : #153, #111, #123, #92</p> <p>Pull Request : #158</p> <p>.gitpod.Dockerfile</p> <p><pre><code>FROM gitpod/workspace-full:latest\n</code></pre> Other things were almost similar to that of the codespace environment.</p> <p>.gitpod.yml</p> <pre><code>image:\n  file: .gitpod.Dockerfile\n  #after first build of gitpod docker image change file to image with the tag.\n\ntasks:\n    - name: Initial Setup for R-dev-env Gitpod Workspace\n      before: |\n         bash /workspace/r-dev-env/scripts/localscript.sh\n         source ~/.bashrc\nvscode:\n    extensions:\n     - REditorSupport.r\n     - johnstoncode.svn-scm\n</code></pre> <p>This week, I focused on configuring the gitpod.yml file to define and customize the development environment for Gitpod workspaces. I executed a local script that sets up the initial environment for the R Dev Container and added useful VSCode extensions, including R Editor and SVN. Additionally, I updated the helper scripts and transferred environment path variables from the Dockerfile to these scripts to streamline the setup process.</p> <p>localscript file</p> <pre><code>local_script(){\n\n# Workspace root is $PWD at the start\nWORK_DIR=$PWD\nVSCODE_DIR=\"$WORK_DIR/.vscode\"\nDEVCONTAINER_JSON=\"$WORK_DIR/.devcontainer/devcontainer.json\"\n\n# Create patch directory in workspace root ($PWD at start)\nPATCHDIR=\"$WORK_DIR/patches\"\n</code></pre> <p>I updated the local script to dynamically retrieve the present working directory (PWD) and use it as the WORK_DIR. This directory will serve as the base path for the helper scripts, ensuring that they function correctly and perform their tasks effectively.</p>"},{"location":"reports/week_8/#workflow-to-build-gitpod-workspace-docker-image","title":"Workflow to Build Gitpod Workspace Docker Image","text":"<p>Here I added a docker build workflow to build gitpod docker image.</p> <p>Issue Number :#160</p> <p>Pull Request : #162</p> <pre><code>- name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .gitpod.Dockerfile\n          push: true\n          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gitpod.${{ github.ref_name }}\n          build-args: |\n            CONTAINER_VERSION=${{ env.VERSION }}\n          labels: ${{ steps.meta.outputs.labels }}\n</code></pre>"},{"location":"reports/week_9/","title":"Week 9","text":"<p>July 22 - July 27</p>"},{"location":"reports/week_9/#valgrind-usage-docs","title":"Valgrind Usage Docs","text":"<p>This was the follow up on issue number #101 from week 6. Initially the issue was to install valgrind in docker image but it was already present, so we thought to add valgrind usage information in docs.</p> <p>Issue Number : #101</p> <p>Pull Request : #163</p>"}]}